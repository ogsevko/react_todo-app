{"version":3,"sources":["components/TodoItem.js","components/TodoShape.js","components/TodoList.js","components/NewTodo.js","components/TodoCount.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","PropTypes","shape","id","string","isRequired","title","completed","bool","state","todoTitle","isTitleValid","isEditing","handleDoubleClick","setState","prevState","handleChange","event","target","value","replace","handleKeyPress","todoId","key","preventDefault","saveEditedTodo","props","length","this","todo","onCheck","onDelete","className","classNames","editing","type","checked","onChange","onDoubleClick","onClick","edit","onKeyPress","React","Component","TodoList","todos","handleCheck","handleDelete","map","item","defaultProps","NewTodo","addNewTodo","uuid","placeholder","TodoCount","todoLength","TodosFilter","handleFilter","handleFilterAll","isAllSelected","isActiveSelected","isCompletedSelected","App","newTodo","newState","JSON","parse","localStorage","getItem","setItem","stringify","todoCopy","filter","toggleAll","every","clearCompleted","callback","innerHTML","editedTodo","todosFromStorage","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"yUAKaA,GCHYC,IAAUC,MAAM,CACvCC,GAAIF,IAAUG,OAAOC,WACrBC,MAAOL,IAAUG,OAAOC,WACxBE,UAAWN,IAAUO,KAAKH,aDA5B,4MACEI,MAAQ,CACNC,UAAW,GACXC,cAAc,EACdC,WAAW,GAJf,EAOEC,kBAAoB,SAACP,GACnB,EAAKQ,UAAS,SAAAC,GAAS,MAAK,CAC1BH,WAAYG,EAAUH,UACtBF,UAAWJ,OAVjB,EAcEU,aAAe,SAACC,GACd,EAAKH,SAAS,CACZJ,UAAWO,EAAMC,OAAOC,MAAMC,QAAQ,WAAY,IAClDT,cAAc,KAjBpB,EAqBEU,eAAiB,SAACJ,EAAOK,GACvB,GAAkB,UAAdL,EAAMM,IAAiB,CACzBN,EAAMO,iBADmB,IAGjBC,EAAmB,EAAKC,MAAxBD,eAEgD,IAApD,EAAKhB,MAAMC,UAAUU,QAAQ,OAAQ,IAAIO,QAC3C,EAAKb,SAAS,CACZH,cAAc,IAId,EAAKF,MAAME,eACbc,EAAe,CACbtB,GAAImB,EACJhB,MAAO,EAAKG,MAAMC,UAClBH,WAAW,IAGb,EAAKO,SAAS,CACZJ,UAAW,GACXE,WAAW,OA1CrB,uDAgDY,IAAD,SAC6BgB,KAAKF,MAAjCG,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,SAEvB,OACE,wBACEC,UACEC,IACE,CAAE1B,UAAWsB,EAAKtB,WAClB,CAAE2B,QAASN,KAAKnB,MAAMG,aAI1B,yBAAKoB,UAAU,QACb,2BACEG,KAAK,WACLH,UAAU,SACV7B,GAAI0B,EAAK1B,GACTiC,QAASP,EAAKtB,UACd8B,SAAU,kBAAMP,EAAQD,EAAK1B,OAE/B,2BACEmC,cAAe,kBAAM,EAAKzB,kBAAkBgB,EAAKvB,SAEhDuB,EAAKvB,OAER,4BACE6B,KAAK,SACLH,UAAU,UACVO,QAAS,kBAAMR,EAASF,EAAK1B,QAI/ByB,KAAKnB,MAAMG,UAEP,2BACEuB,KAAK,OACLhB,MAAOS,KAAKnB,MAAMC,UAClBsB,UAAWC,IAAW,CAAEO,KAAMZ,KAAKnB,MAAMG,YACzCyB,SAAU,SAAApB,GAAK,OAAI,EAAKD,aAAaC,IACrCwB,WAAY,SAAAxB,GAAK,OAAI,EAAKI,eAAeJ,EAAOY,EAAK1B,OAIvD,oCA3Fd,GAA8BuC,IAAMC,YEAvBC,EACX,SAAC,GAAD,IACEC,EADF,EACEA,MAAOC,EADT,EACSA,YAAaC,EADtB,EACsBA,aAActB,EADpC,EACoCA,eADpC,OAGA,wBAAIO,UAAU,aAEVa,EAAMG,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CACE1B,IAAK0B,EAAK9C,GACV0B,KAAMoB,EACNnB,QAASgB,EACTf,SAAUgB,EACVtB,eAAgBA,SAc1BmB,EAASM,aAAe,CACtBL,MAAO,I,YC5BIM,EAAb,4MACE1C,MAAQ,CACNC,UAAW,GACXC,cAAc,GAHlB,EAMEK,aAAe,SAACC,GACd,EAAKH,SAAS,CACZJ,UAAWO,EAAMC,OAAOC,MAAMC,QAAQ,WAAY,IAClDT,cAAc,KATpB,EAaEU,eAAiB,SAACJ,GAChB,GAAkB,UAAdA,EAAMM,IAAiB,CACzBN,EAAMO,iBADmB,IAGjB4B,EAAe,EAAK1B,MAApB0B,WACF9B,EAAS+B,iBAEyC,IAApD,EAAK5C,MAAMC,UAAUU,QAAQ,OAAQ,IAAIO,QAC3C,EAAKb,SAAS,CACZH,cAAc,IAId,EAAKF,MAAME,eACbyC,EAAW,CACTjD,GAAImB,EACJhB,MAAO,EAAKG,MAAMC,UAClBH,WAAW,IAGb,EAAKO,SAAS,CACZJ,UAAW,QAlCrB,uDAwCY,IAAD,OACP,OACE,2BACEyB,KAAK,OACLH,UAAU,WACVsB,YAAY,yBACZnC,MAAOS,KAAKnB,MAAMC,UAClB2B,SAAU,SAAApB,GAAK,OAAI,EAAKD,aAAaC,IACrCwB,WAAY,SAAAxB,GAAK,OAAI,EAAKI,eAAeJ,UAhDjD,GAA6ByB,IAAMC,WCDtBY,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACvB,0BAAMxB,UAAU,cAAhB,UACMwB,EADN,YACmC,IAAfA,EAAmB,OAAS,QADhD,WCDWC,EACX,SAAC,GAAD,IACEC,EADF,EACEA,aAAcC,EADhB,EACgBA,gBAAiBC,EADjC,EACiCA,cAC/BC,EAFF,EAEEA,iBAAkBC,EAFpB,EAEoBA,oBAFpB,OAIA,wBAAI9B,UAAU,WACZ,4BACE,4BACEG,KAAK,SACLH,UAAW4B,EAAgB,WAAa,GACxCrB,QAASoB,GAHX,QASF,4BACE,4BACExB,KAAK,SACLH,UAAW6B,EAAmB,WAAa,GAC3CtB,QAAS,SAAAtB,GAAK,OAAIyC,GAAa,SAAA7B,GAAI,OAAKA,EAAKtB,YAAWU,KAH1D,WASF,4BACE,4BACEkB,KAAK,SACLH,UAAW8B,EAAsB,WAAa,GAC9CvB,QAAS,SAAAtB,GAAK,OAAIyC,GAAa,SAAA7B,GAAI,OAAIA,EAAKtB,YAAWU,KAHzD,gBCmLS8C,EA3Mf,4MACEtD,MAAQ,CACNoC,MAAO,GACPe,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,GALzB,EAkBEV,WAAa,SAACY,GACZ,IAAMC,EAAW,CACfpB,MAAM,GAAD,mBAAMqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,OAAhD,CAAuDmB,IAC5DJ,cAAe,EAAKnD,MAAMmD,cAC1BC,iBAAkB,EAAKpD,MAAMoD,iBAC7BC,oBAAqB,EAAKrD,MAAMqD,qBAG9B,EAAKrD,MAAMqD,oBACbM,aAAaE,QAAQ,QAASJ,KAAKK,UAAUN,IAE7C,EAAKnD,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAM,GAAD,mBAAM9B,EAAU8B,OAAhB,CAAuBmB,QAE9B,kBAAMI,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,YAhC9D,EAoCEqC,YAAc,SAAC3C,GACb,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAO9B,EAAU8B,MAAMG,KAAI,SAACnB,GAC1B,IAAM2C,EAAQ,eAAQ3C,GAMtB,OAJIA,EAAK1B,KAAOA,IACdqE,EAASjE,WAAasB,EAAKtB,WAGtBiE,SAGX,kBAAMJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,YAhD5D,EAmDEsC,aAAe,SAAC5C,GACd,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAO9B,EAAU8B,MAAM4B,QAAO,SAAA5C,GAAI,OAAIA,EAAK1B,KAAOA,SAEpD,kBAAMiE,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,YAvD5D,EA0DEiE,UAAY,WACN,EAAKjE,MAAMoC,MAAM8B,OAAM,SAAA9C,GAAI,OAAuB,IAAnBA,EAAKtB,aACtC,EAAKO,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAO9B,EAAU8B,MAAMG,KAAI,SAACnB,GAC1B,IAAM2C,EAAQ,eAAQ3C,GAItB,OAFA2C,EAASjE,WAAY,EAEdiE,SAGX,kBAAMJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,WAExD,EAAKK,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAO9B,EAAU8B,MAAMG,KAAI,SAACnB,GAC1B,IAAM2C,EAAQ,eAAQ3C,GAMtB,OAJK2C,EAASjE,YACZiE,EAASjE,WAAY,GAGhBiE,SAGX,kBAAMJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,YAlF9D,EAsFEmE,eAAiB,WACf,IAGMX,EAAW,CACfpB,MAJsBqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MAC/D4B,QAAO,SAAA5C,GAAI,OAAKA,EAAKtB,aAItBqD,cAAe,EAAKnD,MAAMmD,cAC1BC,iBAAkB,EAAKpD,MAAMoD,iBAC7BC,oBAAqB,EAAKrD,MAAMqD,qBAGlC,EAAKhD,SAAS,CACZ+B,MAAO,KAET,kBAAMuB,aAAaE,QAAQ,QAASJ,KAAKK,UAAUN,QApGvD,EAuGEP,aAAe,SAACmB,EAAU5D,GACO,WAA3BA,EAAMC,OAAO4D,UACf,EAAKhE,SAAS,CACZ+B,MAAOqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MAAM4B,OAAOI,GAC9DjB,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,IAEa,cAA3B7C,EAAMC,OAAO4D,WACtB,EAAKhE,SAAS,CACZ+B,MAAOqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MAAM4B,OAAOI,GAC9DjB,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,KApH7B,EAyHEH,gBAAkB,WAChB,EAAK7C,SAAS,CACZ+B,MAAOqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MACjDe,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,KA9H3B,EAkIErC,eAAiB,SAACsD,GAChB,EAAKjE,UAAS,SAAAC,GAAS,MAAK,CAC1B8B,MAAO9B,EAAU8B,MAAMG,KAAI,SAACnB,GAC1B,IAAI2C,EAAQ,eAAQ3C,GAMpB,OAJI2C,EAASrE,KAAO4E,EAAW5E,KAC7BqE,EAAQ,eAAQO,IAGXP,SAGX,kBAAMJ,aAAaE,QAAQ,QAASJ,KAAKK,UAAU,EAAK9D,YA9I5D,kEASI,IAAMuE,EAAqD,OAAlCZ,aAAaC,QAAQ,SAC1CH,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MAC1C,GAEJjB,KAAKd,SAAS,CACZ+B,MAAOmC,MAdb,+BAkJI,OACE,6BAAShD,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAASoB,WAAYxB,KAAKwB,cAG5B,6BAASpB,UAAU,QACjB,2BACEG,KAAK,WACLhC,GAAG,aACH6B,UAAU,aACVK,SAAUT,KAAK8C,YAEjB,2BAAOO,QAAQ,cAAf,wBAIA,kBAAC,EAAD,CACEpC,MAAOjB,KAAKnB,MAAMoC,MAClBC,YAAalB,KAAKkB,YAClBC,aAAcnB,KAAKmB,aACnBtB,eAAgBG,KAAKH,kBAIzB,4BAAQO,UAAU,UAChB,kBAAC,EAAD,CACEwB,WACE5B,KAAKnB,MAAMoC,MACPqB,KAAKC,MAAMC,aAAaC,QAAQ,UAAUxB,MACzC4B,QAAO,SAAA5C,GAAI,OAAKA,EAAKtB,aAAWoB,OACjC,IAIR,kBAAC,EAAD,CACE+B,aAAc9B,KAAK8B,aACnBC,gBAAiB/B,KAAK+B,gBACtBC,cAAehC,KAAKnB,MAAMmD,cAC1BC,iBAAkBjC,KAAKnB,MAAMoD,iBAC7BC,oBAAqBlC,KAAKnB,MAAMqD,sBAGlC,4BACE3B,KAAK,SACLH,UAAU,kBACVO,QAASX,KAAKgD,gBAHhB,yBA9LV,GAAyBlC,IAAMC,WCA/BuC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.72ed0e59.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoShape } from './TodoShape';\n\nexport class TodoItem extends React.Component {\n  state = {\n    todoTitle: '',\n    isTitleValid: true,\n    isEditing: false,\n  }\n\n  handleDoubleClick = (title) => {\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n      todoTitle: title,\n    }));\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoTitle: event.target.value.replace(/[^\\s\\w]/g, ''),\n      isTitleValid: true,\n    });\n  }\n\n  handleKeyPress = (event, todoId) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      const { saveEditedTodo } = this.props;\n\n      if (this.state.todoTitle.replace(/\\s+/g, '').length === 0) {\n        this.setState({\n          isTitleValid: false,\n        });\n      }\n\n      if (this.state.isTitleValid) {\n        saveEditedTodo({\n          id: todoId,\n          title: this.state.todoTitle,\n          completed: false,\n        });\n\n        this.setState({\n          todoTitle: '',\n          isEditing: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    const { todo, onCheck, onDelete } = this.props;\n\n    return (\n      <li\n        className={\n          classNames(\n            { completed: todo.completed },\n            { editing: this.state.isEditing },\n          )\n        }\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={todo.id}\n            checked={todo.completed}\n            onChange={() => onCheck(todo.id)}\n          />\n          <label\n            onDoubleClick={() => this.handleDoubleClick(todo.title)}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDelete(todo.id)}\n          />\n        </div>\n        {\n          this.state.isEditing\n            ? (\n              <input\n                type=\"text\"\n                value={this.state.todoTitle}\n                className={classNames({ edit: this.state.isEditing })}\n                onChange={event => this.handleChange(event)}\n                onKeyPress={event => this.handleKeyPress(event, todo.id)}\n              />\n            )\n            : (\n              <span />\n            )\n        }\n\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: TodoShape.isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  saveEditedTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport { TodoShape } from './TodoShape';\n\nexport const TodoList\n= (\n  { todos, handleCheck, handleDelete, saveEditedTodo },\n) => (\n  <ul className=\"todo-list\">\n    {\n      todos.map(item => (\n        <TodoItem\n          key={item.id}\n          todo={item}\n          onCheck={handleCheck}\n          onDelete={handleDelete}\n          saveEditedTodo={saveEditedTodo}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape),\n  handleCheck: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  saveEditedTodo: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends React.Component {\n  state = {\n    todoTitle: '',\n    isTitleValid: true,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoTitle: event.target.value.replace(/[^\\s\\w]/g, ''),\n      isTitleValid: true,\n    });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      const { addNewTodo } = this.props;\n      const todoId = uuid();\n\n      if (this.state.todoTitle.replace(/\\s+/g, '').length === 0) {\n        this.setState({\n          isTitleValid: false,\n        });\n      }\n\n      if (this.state.isTitleValid) {\n        addNewTodo({\n          id: todoId,\n          title: this.state.todoTitle,\n          completed: false,\n        });\n\n        this.setState({\n          todoTitle: '',\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={this.state.todoTitle}\n        onChange={event => this.handleChange(event)}\n        onKeyPress={event => this.handleKeyPress(event)}\n      />\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ todoLength }) => (\n  <span className=\"todo-count\">\n    {`${todoLength} ${todoLength === 1 ? 'item' : 'items'} left`}\n  </span>\n);\n\nTodoCount.propTypes = {\n  todoLength: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter\n= (\n  { handleFilter, handleFilterAll, isAllSelected,\n    isActiveSelected, isCompletedSelected },\n) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={isAllSelected ? 'selected' : ''}\n        onClick={handleFilterAll}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={isActiveSelected ? 'selected' : ''}\n        onClick={event => handleFilter(todo => !todo.completed, event)}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={isCompletedSelected ? 'selected' : ''}\n        onClick={event => handleFilter(todo => todo.completed, event)}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  handleFilterAll: PropTypes.func.isRequired,\n  isAllSelected: PropTypes.bool.isRequired,\n  isActiveSelected: PropTypes.bool.isRequired,\n  isCompletedSelected: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoCount } from './components/TodoCount';\nimport { TodosFilter } from './components/TodosFilter';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    isAllSelected: true,\n    isActiveSelected: false,\n    isCompletedSelected: false,\n  };\n\n  componentDidMount() {\n    const todosFromStorage = localStorage.getItem('state') !== null\n      ? JSON.parse(localStorage.getItem('state')).todos\n      : [];\n\n    this.setState({\n      todos: todosFromStorage,\n    });\n  }\n\n  addNewTodo = (newTodo) => {\n    const newState = {\n      todos: [...JSON.parse(localStorage.getItem('state')).todos, newTodo],\n      isAllSelected: this.state.isAllSelected,\n      isActiveSelected: this.state.isActiveSelected,\n      isCompletedSelected: this.state.isCompletedSelected,\n    };\n\n    if (this.state.isCompletedSelected) {\n      localStorage.setItem('state', JSON.stringify(newState));\n    } else {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, newTodo],\n      }),\n      () => localStorage.setItem('state', JSON.stringify(this.state)));\n    }\n  }\n\n  handleCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        const todoCopy = { ...todo };\n\n        if (todo.id === id) {\n          todoCopy.completed = !todo.completed;\n        }\n\n        return todoCopy;\n      }),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  handleDelete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  toggleAll = () => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          todoCopy.completed = false;\n\n          return todoCopy;\n        }),\n      }),\n      () => localStorage.setItem('state', JSON.stringify(this.state)));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          if (!todoCopy.completed) {\n            todoCopy.completed = true;\n          }\n\n          return todoCopy;\n        }),\n      }),\n      () => localStorage.setItem('state', JSON.stringify(this.state)));\n    }\n  }\n\n  clearCompleted = () => {\n    const todosAfterClear = JSON.parse(localStorage.getItem('state')).todos\n      .filter(todo => !todo.completed);\n\n    const newState = {\n      todos: todosAfterClear,\n      isAllSelected: this.state.isAllSelected,\n      isActiveSelected: this.state.isActiveSelected,\n      isCompletedSelected: this.state.isCompletedSelected,\n    };\n\n    this.setState({\n      todos: [],\n    },\n    () => localStorage.setItem('state', JSON.stringify(newState)));\n  }\n\n  handleFilter = (callback, event) => {\n    if (event.target.innerHTML === 'Active') {\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('state')).todos.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: true,\n        isCompletedSelected: false,\n      });\n    } else if (event.target.innerHTML === 'Completed') {\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('state')).todos.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: false,\n        isCompletedSelected: true,\n      });\n    }\n  }\n\n  handleFilterAll = () => {\n    this.setState({\n      todos: JSON.parse(localStorage.getItem('state')).todos,\n      isAllSelected: true,\n      isActiveSelected: false,\n      isCompletedSelected: false,\n    });\n  }\n\n  saveEditedTodo = (editedTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        let todoCopy = { ...todo };\n\n        if (todoCopy.id === editedTodo.id) {\n          todoCopy = { ...editedTodo };\n        }\n\n        return todoCopy;\n      }),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n\n          <TodoList\n            todos={this.state.todos}\n            handleCheck={this.handleCheck}\n            handleDelete={this.handleDelete}\n            saveEditedTodo={this.saveEditedTodo}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <TodoCount\n            todoLength={\n              this.state.todos\n                ? JSON.parse(localStorage.getItem('state')).todos\n                  .filter(todo => !todo.completed).length\n                : 0\n            }\n          />\n\n          <TodosFilter\n            handleFilter={this.handleFilter}\n            handleFilterAll={this.handleFilterAll}\n            isAllSelected={this.state.isAllSelected}\n            isActiveSelected={this.state.isActiveSelected}\n            isCompletedSelected={this.state.isCompletedSelected}\n          />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}