{"version":3,"sources":["components/TodoItem.js","components/TodoShape.js","components/TodoList.js","components/NewTodo.js","components/TodoCount.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","PropTypes","shape","id","string","isRequired","title","completed","bool","todo","onCheck","onDelete","className","type","checked","onChange","htmlFor","onClick","TodoList","todos","handleCheck","handleDelete","map","item","key","defaultProps","NewTodo","state","todoTitle","isTitleValid","handleChange","event","setState","target","value","replace","handleKeyPress","preventDefault","addNewTodo","props","todoId","uuid","length","placeholder","this","onKeyPress","React","Component","TodoCount","todoLength","TodosFilter","handleFilter","handleFilterAll","isAllSelected","isActiveSelected","isCompletedSelected","App","newTodo","prevState","localStorage","setItem","JSON","stringify","todoCopy","filter","toggleAll","every","clearCompleted","parse","getItem","callback","innerHTML","todosFromStorage","ReactDOM","render","document","getElementById"],"mappings":"yTAIaA,GCFYC,IAAUC,MAAM,CACvCC,GAAIF,IAAUG,OAAOC,WACrBC,MAAOL,IAAUG,OAAOC,WACxBE,UAAWN,IAAUO,KAAKH,aDDJ,SAAC,GAAD,IAAGI,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,SAAlB,OACtB,wBACEC,UAAWH,EAAKF,UAAY,YAAc,IAE1C,yBAAKK,UAAU,QACb,2BACEC,KAAK,WACLD,UAAU,SACVT,GAAIM,EAAKN,GACTW,QAASL,EAAKF,UACdQ,SAAU,kBAAML,EAAQD,EAAKN,OAE/B,2BAAOa,QAASP,EAAKN,IAClBM,EAAKH,OAER,4BACEO,KAAK,SACLD,UAAU,UACVK,QAAS,kBAAMN,EAASF,EAAKN,QAGjC,2BACEU,KAAK,OACLD,UAAU,YEtBHM,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,aAAvB,OACtB,wBAAIT,UAAU,aAEVO,EAAMG,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CACEC,IAAKD,EAAKpB,GACVM,KAAMc,EACNb,QAASU,EACTT,SAAUU,SAapBH,EAASO,aAAe,CACtBN,MAAO,I,WCvBIO,EAAb,4MACEC,MAAQ,CACNC,UAAW,GACXC,cAAc,GAHlB,EAMEC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,UAAWG,EAAME,OAAOC,MAAMC,QAAQ,WAAY,IAClDN,cAAc,KATpB,EAaEO,eAAiB,SAACL,GAChB,GAAkB,UAAdA,EAAMP,IAAiB,CACzBO,EAAMM,iBADmB,IAGjBC,EAAe,EAAKC,MAApBD,WACFE,EAASC,iBAEyC,IAApD,EAAKd,MAAMC,UAAUO,QAAQ,OAAQ,IAAIO,QAC3C,EAAKV,SAAS,CACZH,cAAc,IAId,EAAKF,MAAME,eACbS,EAAW,CACTnC,GAAIqC,EACJlC,MAAO,EAAKqB,MAAMC,UAClBrB,WAAW,IAGb,EAAKyB,SAAS,CACZJ,UAAW,QAlCrB,uDAwCY,IAAD,OACP,OACE,2BACEf,KAAK,OACLD,UAAU,WACV+B,YAAY,yBACZT,MAAOU,KAAKjB,MAAMC,UAClBb,SAAU,SAAAgB,GAAK,OAAI,EAAKD,aAAaC,IACrCc,WAAY,SAAAd,GAAK,OAAI,EAAKK,eAAeL,UAhDjD,GAA6Be,IAAMC,WCDtBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACvB,0BAAMrC,UAAU,cAAhB,UACMqC,EADN,YACmC,IAAfA,EAAmB,OAAS,QADhD,WCDWC,EACX,SAAC,GAAD,IACEC,EADF,EACEA,aAAcC,EADhB,EACgBA,gBAAiBC,EADjC,EACiCA,cAC/BC,EAFF,EAEEA,iBAAkBC,EAFpB,EAEoBA,oBAFpB,OAIA,wBAAI3C,UAAU,WACZ,4BACE,4BACEC,KAAK,SACLD,UAAWyC,EAAgB,WAAa,GACxCpC,QAASmC,GAHX,QASF,4BACE,4BACEvC,KAAK,SACLD,UAAW0C,EAAmB,WAAa,GAC3CrC,QAAS,SAAAc,GAAK,OAAIoB,GAAa,SAAA1C,GAAI,OAAKA,EAAKF,YAAWwB,KAH1D,WASF,4BACE,4BACElB,KAAK,SACLD,UAAW2C,EAAsB,WAAa,GAC9CtC,QAAS,SAAAc,GAAK,OAAIoB,GAAa,SAAA1C,GAAI,OAAIA,EAAKF,YAAWwB,KAHzD,gBC6ISyB,EApKf,4MACE7B,MAAQ,CACNR,MAAO,GACPkC,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,GALzB,EAkBEjB,WAAa,SAACmB,GACZ,EAAKzB,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAM,GAAD,mBAAMuC,EAAUvC,OAAhB,CAAuBsC,QAE9B,kBAAME,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,YAtB5D,EAyBEP,YAAc,SAACjB,GACb,EAAK6B,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAOuC,EAAUvC,MAAMG,KAAI,SAACb,GAC1B,IAAMsD,EAAQ,eAAQtD,GAMtB,OAJIA,EAAKN,KAAOA,IACd4D,EAASxD,WAAaE,EAAKF,WAGtBwD,SAGX,kBAAMJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,YArC5D,EAwCEN,aAAe,SAAClB,GACd,EAAK6B,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAOuC,EAAUvC,MAAM6C,QAAO,SAAAvD,GAAI,OAAIA,EAAKN,KAAOA,SAEpD,kBAAMwD,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,YA5C5D,EA+CEsC,UAAY,WACN,EAAKtC,MAAMR,MAAM+C,OAAM,SAAAzD,GAAI,OAAuB,IAAnBA,EAAKF,aACtC,EAAKyB,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAOuC,EAAUvC,MAAMG,KAAI,SAACb,GAC1B,IAAMsD,EAAQ,eAAQtD,GAItB,OAFAsD,EAASxD,WAAY,EAEdwD,SAGX,kBAAMJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,WAExD,EAAKK,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAOuC,EAAUvC,MAAMG,KAAI,SAACb,GAC1B,IAAMsD,EAAQ,eAAQtD,GAMtB,OAJKsD,EAASxD,YACZwD,EAASxD,WAAY,GAGhBwD,SAGX,kBAAMJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,YAvE9D,EA2EEwC,eAAiB,WACf,EAAKnC,UAAS,SAAA0B,GAAS,MAAK,CAC1BvC,MAAO0C,KAAKO,MAAMT,aAAaU,QAAQ,UAAUlD,MAAM6C,QAAO,SAAAvD,GAAI,OAAKA,EAAKF,iBAE9E,kBAAMoD,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKnC,YA/E5D,EAkFEwB,aAAe,SAACmB,EAAUvC,GACO,WAA3BA,EAAME,OAAOsC,UACf,EAAKvC,SAAS,CACZb,MAAO0C,KAAKO,MAAMT,aAAaU,QAAQ,UAAUlD,MAAM6C,OAAOM,GAC9DjB,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,IAEa,cAA3BxB,EAAME,OAAOsC,WACtB,EAAKvC,SAAS,CACZb,MAAO0C,KAAKO,MAAMT,aAAaU,QAAQ,UAAUlD,MAAM6C,OAAOM,GAC9DjB,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,KA/F7B,EAoGEH,gBAAkB,WAChB,EAAKpB,SAAS,CACZb,MAAO0C,KAAKO,MAAMT,aAAaU,QAAQ,UAAUlD,MACjDkC,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,KAzG3B,kEASI,IAAMiB,EAAiE,OAA9CX,KAAKO,MAAMT,aAAaU,QAAQ,UACrDR,KAAKO,MAAMT,aAAaU,QAAQ,UAAUlD,MAC1C,GAEJyB,KAAKZ,SAAS,CACZb,MAAOqD,MAdb,+BA8GI,OACE,6BAAS5D,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAAS0B,WAAYM,KAAKN,cAG5B,6BAAS1B,UAAU,QACjB,2BACEC,KAAK,WACLV,GAAG,aACHS,UAAU,aACVG,SAAU6B,KAAKqB,YAEjB,2BAAOjD,QAAQ,cAAf,wBAIA,kBAAC,EAAD,CACEG,MAAOyB,KAAKjB,MAAMR,MAClBC,YAAawB,KAAKxB,YAClBC,aAAcuB,KAAKvB,gBAIvB,4BAAQT,UAAU,UAChB,kBAAC,EAAD,CACEqC,WACEL,KAAKjB,MAAMR,MACPyB,KAAKjB,MAAMR,MAAM6C,QAAO,SAAAvD,GAAI,OAAKA,EAAKF,aAAWmC,OACjD,IAGR,kBAAC,EAAD,CACES,aAAcP,KAAKO,aACnBC,gBAAiBR,KAAKQ,gBACtBC,cAAeT,KAAKjB,MAAM0B,cAC1BC,iBAAkBV,KAAKjB,MAAM2B,iBAC7BC,oBAAqBX,KAAKjB,MAAM4B,sBAGlC,4BACE1C,KAAK,SACLD,UAAU,kBACVK,QAAS2B,KAAKuB,gBAHhB,yBAvJV,GAAyBrB,IAAMC,WCD/B0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e68c4103.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from './TodoShape';\n\nexport const TodoItem = ({ todo, onCheck, onDelete }) => (\n  <li\n    className={todo.completed ? 'completed' : ''}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        checked={todo.completed}\n        onChange={() => onCheck(todo.id)}\n      />\n      <label htmlFor={todo.id}>\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => onDelete(todo.id)}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: TodoShape.isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport { TodoShape } from './TodoShape';\n\nexport const TodoList = ({ todos, handleCheck, handleDelete }) => (\n  <ul className=\"todo-list\">\n    {\n      todos.map(item => (\n        <TodoItem\n          key={item.id}\n          todo={item}\n          onCheck={handleCheck}\n          onDelete={handleDelete}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape),\n  handleCheck: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends React.Component {\n  state = {\n    todoTitle: '',\n    isTitleValid: true,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoTitle: event.target.value.replace(/[^\\s\\w]/g, ''),\n      isTitleValid: true,\n    });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      const { addNewTodo } = this.props;\n      const todoId = uuid();\n\n      if (this.state.todoTitle.replace(/\\s+/g, '').length === 0) {\n        this.setState({\n          isTitleValid: false,\n        });\n      }\n\n      if (this.state.isTitleValid) {\n        addNewTodo({\n          id: todoId,\n          title: this.state.todoTitle,\n          completed: false,\n        });\n\n        this.setState({\n          todoTitle: '',\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={this.state.todoTitle}\n        onChange={event => this.handleChange(event)}\n        onKeyPress={event => this.handleKeyPress(event)}\n      />\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ todoLength }) => (\n  <span className=\"todo-count\">\n    {`${todoLength} ${todoLength === 1 ? 'item' : 'items'} left`}\n  </span>\n);\n\nTodoCount.propTypes = {\n  todoLength: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter\n= (\n  { handleFilter, handleFilterAll, isAllSelected,\n    isActiveSelected, isCompletedSelected },\n) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={isAllSelected ? 'selected' : ''}\n        onClick={handleFilterAll}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={isActiveSelected ? 'selected' : ''}\n        onClick={event => handleFilter(todo => !todo.completed, event)}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={isCompletedSelected ? 'selected' : ''}\n        onClick={event => handleFilter(todo => todo.completed, event)}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  handleFilterAll: PropTypes.func.isRequired,\n  isAllSelected: PropTypes.bool.isRequired,\n  isActiveSelected: PropTypes.bool.isRequired,\n  isCompletedSelected: PropTypes.bool.isRequired,\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoCount } from './components/TodoCount';\nimport { TodosFilter } from './components/TodosFilter';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    isAllSelected: true,\n    isActiveSelected: false,\n    isCompletedSelected: false,\n  };\n\n  componentDidMount() {\n    const todosFromStorage = JSON.parse(localStorage.getItem('state')) !== null\n      ? JSON.parse(localStorage.getItem('state')).todos\n      : [];\n\n    this.setState({\n      todos: todosFromStorage,\n    });\n  }\n\n  addNewTodo = (newTodo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, newTodo],\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  handleCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        const todoCopy = { ...todo };\n\n        if (todo.id === id) {\n          todoCopy.completed = !todo.completed;\n        }\n\n        return todoCopy;\n      }),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  handleDelete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  toggleAll = () => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          todoCopy.completed = false;\n\n          return todoCopy;\n        }),\n      }),\n      () => localStorage.setItem('state', JSON.stringify(this.state)));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          if (!todoCopy.completed) {\n            todoCopy.completed = true;\n          }\n\n          return todoCopy;\n        }),\n      }),\n      () => localStorage.setItem('state', JSON.stringify(this.state)));\n    }\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: JSON.parse(localStorage.getItem('state')).todos.filter(todo => !todo.completed),\n    }),\n    () => localStorage.setItem('state', JSON.stringify(this.state)));\n  }\n\n  handleFilter = (callback, event) => {\n    if (event.target.innerHTML === 'Active') {\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('state')).todos.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: true,\n        isCompletedSelected: false,\n      });\n    } else if (event.target.innerHTML === 'Completed') {\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('state')).todos.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: false,\n        isCompletedSelected: true,\n      });\n    }\n  }\n\n  handleFilterAll = () => {\n    this.setState({\n      todos: JSON.parse(localStorage.getItem('state')).todos,\n      isAllSelected: true,\n      isActiveSelected: false,\n      isCompletedSelected: false,\n    });\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n\n          <TodoList\n            todos={this.state.todos}\n            handleCheck={this.handleCheck}\n            handleDelete={this.handleDelete}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <TodoCount\n            todoLength={\n              this.state.todos\n                ? this.state.todos.filter(todo => !todo.completed).length\n                : 0}\n          />\n\n          <TodosFilter\n            handleFilter={this.handleFilter}\n            handleFilterAll={this.handleFilterAll}\n            isAllSelected={this.state.isAllSelected}\n            isActiveSelected={this.state.isActiveSelected}\n            isCompletedSelected={this.state.isCompletedSelected}\n          />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}