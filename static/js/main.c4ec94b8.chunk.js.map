{"version":3,"sources":["components/TodoItem.js","components/TodoShape.js","components/TodoList.js","components/NewTodo.js","components/TodoCount.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoItem","PropTypes","shape","id","string","isRequired","title","completed","bool","state","todoTitle","isTitleValid","isEditing","handleDoubleClick","setState","prevState","handleChange","event","target","value","replace","handleKeyPress","todoId","key","preventDefault","saveEditedTodo","props","length","handleKeyDown","this","todo","onCheck","onDelete","className","classNames","editing","type","checked","onChange","onDoubleClick","onClick","edit","onKeyPress","onKeyDown","ref","input","focus","React","Component","TodoList","todos","handleCheck","handleDelete","map","item","defaultProps","NewTodo","addNewTodo","uuid","placeholder","TodoCount","todoLength","TodosFilter","handleFilter","handleFilterAll","isAllSelected","isActiveSelected","isCompletedSelected","selected","App","backupTodos","todosBackUp","newTodo","todoCopy","filter","toggleAll","every","clearCompleted","callback","innerHTML","editedTodo","todosFromStorage","localStorage","getItem","JSON","parse","currentState","setItem","stringify","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4ec94b8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoShape } from './TodoShape';\n\nexport class TodoItem extends React.Component {\n  state = {\n    todoTitle: '',\n    isTitleValid: true,\n    isEditing: false,\n  }\n\n  handleDoubleClick = (title) => {\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n      todoTitle: title,\n    }));\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoTitle: event.target.value.replace(/[^\\s\\w]/g, ''),\n      isTitleValid: true,\n    });\n  }\n\n  handleKeyPress = (event, todoId) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      const { saveEditedTodo } = this.props;\n\n      if (this.state.todoTitle.replace(/\\s+/g, '').length === 0) {\n        this.setState({\n          isTitleValid: false,\n        });\n      }\n\n      if (this.state.isTitleValid) {\n        saveEditedTodo({\n          id: todoId,\n          title: this.state.todoTitle,\n          completed: false,\n        });\n\n        this.setState({\n          todoTitle: '',\n          isEditing: false,\n        });\n      }\n    }\n  }\n\n  handleKeyDown = (event) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        isEditing: false,\n      });\n    }\n  }\n\n  render() {\n    const { todo, onCheck, onDelete } = this.props;\n\n    return (\n      <li\n        className={\n          classNames(\n            { completed: todo.completed },\n            { editing: this.state.isEditing },\n          )\n        }\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={todo.id}\n            checked={todo.completed}\n            onChange={() => onCheck(todo.id)}\n          />\n          <label\n            onDoubleClick={() => this.handleDoubleClick(todo.title)}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDelete(todo.id)}\n          />\n        </div>\n        {\n          this.state.isEditing\n            ? (\n              <input\n                type=\"text\"\n                value={this.state.todoTitle}\n                className={classNames({ edit: this.state.isEditing })}\n                onChange={event => this.handleChange(event)}\n                onKeyPress={event => this.handleKeyPress(event, todo.id)}\n                onKeyDown={event => this.handleKeyDown(event)}\n                ref={input => input && input.focus()}\n              />\n            )\n            : (\n              <span />\n            )\n        }\n\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: TodoShape.isRequired,\n  onCheck: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  saveEditedTodo: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport { TodoShape } from './TodoShape';\n\nexport const TodoList\n= (\n  { todos, handleCheck, handleDelete, saveEditedTodo },\n) => (\n  <ul className=\"todo-list\">\n    {\n      todos.map(item => (\n        <TodoItem\n          key={item.id}\n          todo={item}\n          onCheck={handleCheck}\n          onDelete={handleDelete}\n          saveEditedTodo={saveEditedTodo}\n        />\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape),\n  handleCheck: PropTypes.func.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  saveEditedTodo: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends React.Component {\n  state = {\n    todoTitle: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      todoTitle: event.target.value,\n    });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      const { addNewTodo } = this.props;\n      const todoId = uuid();\n\n      if (this.state.todoTitle.replace(/\\s+/g, '').length !== 0) {\n        addNewTodo({\n          id: todoId,\n          title: this.state.todoTitle,\n          completed: false,\n        });\n\n        this.setState({\n          todoTitle: '',\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={this.state.todoTitle}\n        onChange={event => this.handleChange(event)}\n        onKeyPress={event => this.handleKeyPress(event)}\n      />\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoCount = ({ todoLength }) => (\n  <span className=\"todo-count\">\n    {`${todoLength} ${todoLength === 1 ? 'item' : 'items'} left`}\n  </span>\n);\n\nTodoCount.propTypes = {\n  todoLength: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodosFilter\n= (\n  { handleFilter, handleFilterAll, isAllSelected,\n    isActiveSelected, isCompletedSelected },\n) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: isAllSelected })}\n        onClick={handleFilterAll}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: isActiveSelected })}\n        onClick={event => handleFilter(todo => !todo.completed, event)}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: isCompletedSelected })}\n        onClick={event => handleFilter(todo => todo.completed, event)}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  handleFilterAll: PropTypes.func.isRequired,\n  isAllSelected: PropTypes.bool.isRequired,\n  isActiveSelected: PropTypes.bool.isRequired,\n  isCompletedSelected: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { TodoCount } from './components/TodoCount';\nimport { TodosFilter } from './components/TodosFilter';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.todosBackUp = [];\n\n    this.state = {\n      todos: [],\n      isAllSelected: true,\n      isActiveSelected: false,\n      isCompletedSelected: false,\n    };\n  }\n\n  componentDidMount() {\n    const todosFromStorage = localStorage.getItem('state') !== null\n      ? JSON.parse(localStorage.getItem('state')).todos\n      : [];\n\n    this.todosBackUp = todosFromStorage;\n\n    this.setState({\n      todos: todosFromStorage,\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.state.isCompletedSelected) {\n      const currentState = {\n        todos: [...this.todosBackUp],\n        isAllSelected: this.state.isAllSelected,\n        isActiveSelected: this.state.isActiveSelected,\n        isCompletedSelected: this.state.isCompletedSelected,\n      };\n\n      localStorage.setItem('state', JSON.stringify(currentState));\n    } else {\n      localStorage.setItem('state', JSON.stringify(this.state));\n    }\n  }\n\n  backupTodos = () => {\n    this.todosBackUp = [...this.state.todos];\n  }\n\n  addNewTodo = (newTodo) => {\n    if (this.state.isCompletedSelected) {\n      this.todosBackUp = [...this.todosBackUp, newTodo];\n    } else {\n      this.setState(prevState => ({\n        todos: [...prevState.todos, newTodo],\n      }),\n      () => this.backupTodos());\n    }\n  }\n\n  handleCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        const todoCopy = { ...todo };\n\n        if (todo.id === id) {\n          todoCopy.completed = !todo.completed;\n        }\n\n        return todoCopy;\n      }),\n    }),\n    () => this.backupTodos());\n  }\n\n  handleDelete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }),\n    () => this.backupTodos());\n  }\n\n  toggleAll = () => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          todoCopy.completed = false;\n\n          return todoCopy;\n        }),\n      }),\n      () => this.backupTodos());\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          const todoCopy = { ...todo };\n\n          if (!todoCopy.completed) {\n            todoCopy.completed = true;\n          }\n\n          return todoCopy;\n        }),\n      }),\n      () => this.backupTodos());\n    }\n  }\n\n  clearCompleted = () => {\n    if (this.state.isCompletedSelected) {\n      this.setState(prevState => ({\n        todos: prevState.todos.filter(todo => !todo.completed),\n      }),\n      () => {\n        this.todosBackUp = this.todosBackUp.filter(todo => !todo.completed);\n      });\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.filter(todo => !todo.completed),\n      }),\n      () => this.backupTodos());\n    }\n  }\n\n  handleFilter = (callback, event) => {\n    if (event.target.innerHTML === 'Active') {\n      this.setState({\n        todos: this.todosBackUp.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: true,\n        isCompletedSelected: false,\n      });\n    } else if (event.target.innerHTML === 'Completed') {\n      this.setState({\n        todos: this.todosBackUp.filter(callback),\n        isAllSelected: false,\n        isActiveSelected: false,\n        isCompletedSelected: true,\n      });\n    }\n  }\n\n  handleFilterAll = () => {\n    this.setState({\n      todos: [...this.todosBackUp],\n      isAllSelected: true,\n      isActiveSelected: false,\n      isCompletedSelected: false,\n    });\n  }\n\n  saveEditedTodo = (editedTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        let todoCopy = { ...todo };\n\n        if (todoCopy.id === editedTodo.id) {\n          todoCopy = { ...editedTodo };\n        }\n\n        return todoCopy;\n      }),\n    }),\n    () => this.backupTodos());\n  }\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n\n          <TodoList\n            todos={this.state.todos}\n            handleCheck={this.handleCheck}\n            handleDelete={this.handleDelete}\n            saveEditedTodo={this.saveEditedTodo}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <TodoCount\n            todoLength={\n              this.state.isCompletedSelected\n                ? this.todosBackUp.filter(todo => !todo.completed).length || 0\n                : this.state.todos.filter(todo => !todo.completed).length || 0\n            }\n          />\n\n          <TodosFilter\n            handleFilter={this.handleFilter}\n            handleFilterAll={this.handleFilterAll}\n            isAllSelected={this.state.isAllSelected}\n            isActiveSelected={this.state.isActiveSelected}\n            isCompletedSelected={this.state.isCompletedSelected}\n          />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}